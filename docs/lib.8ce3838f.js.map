{"version":3,"sources":["lib/dev.ts","lib/Core/Math/Matrix.ts","lib/Core/Event/EventListener.ts","lib/Core/Math/Vector.ts","lib/Core/Shape/Shape.ts","lib/Core/Shape/Point.ts","lib/Core/Behaviour/RotatableBehaviour.ts","lib/Core/Shape/Line.ts","lib/Core/Shape/Polygon.ts","lib/Strategy/FreePolygonStrategy.ts","lib/Strategy/LockedScalingStrategy.ts","lib/Strategy/UnlockedScalingStrategy.ts","lib/OverlayEditor.ts","lib/Subject/ImageSubject.ts","lib/index.ts"],"names":[],"mappings":"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","file":"lib.8ce3838f.js","sourceRoot":"..","sourcesContent":["const rootEl = document.createElement(\"div\")\nrootEl.style.position = \"fixed\"\nrootEl.style.top = \"0\"\nrootEl.style.left = \"0\"\nrootEl.className = \"dev\"\nrootEl.innerHTML = `\n<div>\n    <strong>Guide</strong>\n    <p>\n        Use \\`1\\` - \\`3\\` keys to switch between modes. <br> \n        Keep in mind once you switch to mode \\`3\\` you cannot switch back. <br>\n    </p>\n    <p>\n        Use mouse wheel while hovering the layer to rotate the image.\n    </p>\n    <br>\n    <strong>State</strong>\n</div>\n<table>\n    <tr>\n        <td>FPS</td>\n        <td align=\"right\"><span class=\"fps\"/></td>\n    </tr>\n    <tr>\n        <td>MODE</td>\n        <td align=\"center\"><span class=\"mode\"/></td>\n    </tr>\n    <tr>\n        <td>ROTATION</td>\n        <td align=\"right\"><span class=\"rotation\"/></td>\n    </tr>\n</table>\n`\ndocument.body.prepend(rootEl)\n\nconst fpsEl = rootEl.querySelector(\".fps\")\nconst modeEl = rootEl.querySelector(\".mode\")\nconst rotationEl = rootEl.querySelector(\".rotation\")\nmodeEl.textContent = \"Locked Scaling\"\nrotationEl.textContent = \"0.00°\"\n\nlet previousTick = 0\nlet frameCount = 0\nfunction frame() {\n    const tick = Date.now()\n    frameCount++;\n    if (tick > previousTick + 1000) {\n        let fps = Math.round( ( frameCount * 1000 ) / ( tick - previousTick ) );\n        previousTick = tick;\n        frameCount = 0;\n\n        fpsEl.textContent = String(fps)\n    }\n\n    requestAnimationFrame(frame)\n\n}\n\nframe()","type Matrix = { a: number, b: number, c: number, d: number, tx: number, ty: number }\n\n\n\nexport const identity = (): Matrix =>\n    ({ a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 })\n\n\nexport const translate = (mA: Matrix, tx: number, ty: number): Matrix =>\n    ({ ...mA, ...{ tx, ty } })\n\n\nexport const rotate = (mA: Matrix, radians: number): Matrix  =>\n    ({ ...mA, ...{ a: Math.cos(radians), b: -Math.sin(radians), c: Math.sin(radians), d: Math.cos(radians) } })\n\n\nexport const scale = (mA: Matrix, scalar: number): Matrix =>\n    ({ ...mA, ...{ a: mA[0] * scalar, b: mA[1] * scalar, c: mA[2] * scalar, d: mA[3] * scalar } })\n\n\n\nconst Matrix = {\n    identity,\n    translate,\n    rotate,\n    scale\n}\n\n\nexport default Matrix","export type Listener = (event: Event) => void\n\n\nexport enum EventType {\n    MOUSE_MOVE = \"mousemove\",\n    MOUSE_DOWN = \"mousedown\",\n    MOUSE_UP = \"mouseup\"\n}\n\n\nclass EventListener {\n    private readonly _event: string\n    private readonly _listener: Listener\n    private readonly _targets = new Set<Element | Document>()\n\n    constructor(event: string, listener: Listener) {\n        this._event = event\n        this._listener = listener\n    }\n\n    public subscribe(target: Element | Document): EventListener {\n        target.addEventListener(this._event, this._listener)\n        this._targets.add(target)\n        return this\n    }\n\n    public destroy(): void {\n        for (const target of this._targets) {\n            target.removeEventListener(this._event, this._listener)\n        }\n    }\n}\n\n\n\nexport default EventListener\n\n\n\n/*\n\n    private readonly _handleMoveStart = new EventListener(\"movestart\", (event) => {\n\n    })\n\n\n    this._handleMoveStart.target(document.body)\n\n */","import exp = require(\"constants\")\n\n\n\ntype Vector = { x: number, y: number }\n\n\nexport const create = (x: number, y: number = x) =>\n    ({ x: x, y: y })\n\n\nexport const add = (vA: Vector, vB: Vector): Vector =>\n    ({ x: vA.x + vB.x, y: vA.y + vB.y })\n\n\nexport const subtract = (vA: Vector, vB: Vector): Vector =>\n    ({ x: vA.x - vB.x, y: vA.y - vB.y })\n\n\nexport const multiply = (vA: Vector, vB: Vector): Vector =>\n    ({ x: vA.x * vB.x, y: vA.y * vB.y })\n\n\nexport const divide = (vA: Vector, vB: Vector): Vector =>\n    ({ x: vA.x / vB.x, y: vA.y / vB.y })\n\n\nexport const rotate = (vA: Vector, vB: Vector, radian: number): Vector => {\n    const run = vB.x - vA.x,\n        rise = vB.y - vA.y\n    return {\n        x: (Math.cos(radian) * run) + (Math.sin(radian) * rise) + vA.x,\n        y: (Math.cos(radian) * rise) - (Math.sin(radian) * run) + vA.y\n    }\n}\n\n\nexport const rotate2 = (vA: Vector, radian: number): Vector => {\n    return {\n        x: (vA.x * Math.cos(radian)) - (vA.y * Math.sin(radian)),\n        y: (vA.x * Math.sin(radian)) + (vA.y * Math.cos(radian))\n    }\n}\n\n\nexport const dot = (vA: Vector, vB: Vector): number => {\n    return vA.x * vB.x + vA.y * vB.y;\n}\n\n\nexport const scale = (vA: Vector, scalar: number): Vector =>\n    multiply(vA, { x: scalar, y: scalar })\n\n\nexport const normalize = (vA: Vector): Vector => {\n    const scalar = 1 / length(vA)\n    return scale(vA, scalar === Infinity ? 0 : scalar)\n}\n\n\nexport const length = (vA: Vector): number =>\n    Math.sqrt(vA.x * vA.x + vA.y * vA.y)\n\n\nexport const distance = (vA: Vector, vB: Vector): number =>\n    Math.hypot(vB.x - vA.x, vB.y - vA.y)\n\n\nexport const direction = (vA: Vector): number =>\n    -Math.atan2(vA.y, vA.x) - Math.PI\n\n\nexport const ap = (vA: Vector, f: (component: number) => number) =>\n    ({ x: f(vA.x), y: f(vA.y) })\n\n\n\nconst Vector = {\n    create,\n    add,\n    subtract,\n    multiply,\n    divide,\n    rotate,\n    scale,\n    length,\n    distance,\n    direction,\n    normalize,\n    ap,\n    dot\n}\n\n\nexport default Vector","import EventListener, { EventType } from \"../Event/EventListener\"\nimport Matrix from \"../Math/Matrix\"\nimport Vector, { subtract } from \"../Math/Vector\"\n\n\n\nexport namespace ShapeEvent {\n    export interface MoveEvent extends CustomEvent {\n\n    }\n}\n\nexport enum ShapeEvent {\n    MOVE = \"shape:move\",\n    MOVE_START = \"shape:movestart\",\n    MOVE_END = \"shape:moveend\",\n}\n\n\nabstract class Shape implements Vector {\n    public abstract position: Vector\n    public abstract x: number\n    public abstract y: number\n    public abstract a: Vector\n    public abstract b: Vector\n    public abstract ax: number\n    public abstract ay: number\n    public abstract bx: number\n    public abstract by: number\n\n    private readonly _element: HTMLElement\n    protected _transform = Matrix.identity()\n    protected _origin: Vector = { x: 0.5, y: 0.5 }\n    protected _scale: Vector = { x: 1, y: 1 }\n    protected _direction: number = 0\n    private _state = {\n        isActive: false,\n        isMoving: false,\n        payloads: {\n            move: {\n                shape: this,\n                destination: this as Vector,\n                offset: { x: 0, y: 0 }\n            }\n        }\n    }\n\n\n    protected constructor() {\n        this._element = document.createElement(\"div\")\n        this._element.style.position = \"absolute\"\n        this._element.style.zIndex = \"100\"\n        this._element.style[\"mix-blend-mode\"] = \"exclusion\"\n        this._element.style[\"-webkit-font-smoothing\"] = \"subpixel-antialiased\"\n    }\n\n\n    public prepare(canvas: HTMLElement): void {\n        canvas.append(this._element)\n\n        this._handleMouseMove\n            .subscribe(document)\n        this._handleMouseDown\n            .subscribe(this.element)\n        this._handleMouseUp\n            .subscribe(document)\n    }\n\n    public destroy(): void {\n        this._handleMouseMove\n            .destroy()\n        this._handleMouseDown\n            .destroy()\n        this._handleMouseUp\n            .destroy()\n        this._element.remove()\n    }\n\n    public draw(): void {\n        const { a, b, c, d, tx, ty } = this._transform\n        this.element.style.transformOrigin = `${this.origin.x * 100}% ${this.origin.y * 100}%`\n        this.element.style.transform = `matrix(${a}, ${b}, ${c}, ${d}, ${this.x + tx}, ${this.y + ty})`\n    }\n\n\n    public get element() {\n        return this._element\n    }\n\n    public get dimension() {\n        return { x: this.width, y: this.height }\n    }\n\n    public get width() {\n        return this._element.offsetWidth\n    }\n\n    public get height() {\n        return this._element.offsetHeight\n    }\n\n    public get origin() {\n        return this._origin\n    }\n\n    public set origin(value: Vector) {\n        this._origin = value\n    }\n\n    public get scale() {\n        return this._origin\n    }\n\n    public set scale(value: Vector) {\n        this._scale = value\n    }\n\n    public get direction() {\n        return this._direction\n    }\n\n    public set direction(value: number) {\n        this._direction = value\n    }\n\n\n    private _handleMouseMove = new EventListener(EventType.MOUSE_MOVE, (event: MouseEvent) => {\n        event.preventDefault()\n        if (this._state.isActive) {\n            const { move: payload } = this._state.payloads\n            payload.shape = this\n            payload.destination = {\n                x: event.pageX - this.element.parentElement.offsetLeft,\n                y: event.pageY - this.element.parentElement.offsetTop\n            }\n\n            if (this._state.isMoving) {\n                this.element.dispatchEvent(\n                    new CustomEvent(ShapeEvent.MOVE, {\n                        bubbles: true,\n                        detail: payload\n                    })\n                )\n            } else {\n                this._state.payloads.move.offset = subtract(payload.shape, payload.destination)\n                this.element.dispatchEvent(\n                    new CustomEvent(ShapeEvent.MOVE_START, {\n                        bubbles: true,\n                        detail: payload\n                    })\n                )\n                this._state.isMoving = true\n            }\n        }\n    })\n\n    private _handleMouseDown = new EventListener(EventType.MOUSE_DOWN, (event: MouseEvent) => {\n        event.preventDefault()\n        if (!this._state.isMoving) {\n            this.element.classList.add(\"active\")\n            this._state.isActive = true\n        }\n    })\n\n    private _handleMouseUp = new EventListener(EventType.MOUSE_UP, (event: MouseEvent) => {\n        event.preventDefault()\n        if (this._state.isMoving) {\n            this.element.classList.remove(\"active\")\n            this._state.isActive = false\n            this._state.isMoving = false\n\n            const { move: payload } = this._state.payloads\n            this.element.dispatchEvent(new CustomEvent(ShapeEvent.MOVE_END, {\n                bubbles: true,\n                detail: payload\n            }))\n        }\n    })\n}\n\n\nexport default Shape","import Matrix, { rotate, translate } from \"../Math/Matrix\"\nimport Vector from \"../Math/Vector\"\nimport Shape  from \"./Shape\"\n\n\n\nclass Point extends Shape {\n    private _position: Vector\n\n    constructor(x: number, y: number) {\n        super()\n        this._position = { x, y }\n        this.element.className = \"shape point\"\n        this.element.style.cursor = \"pointer\"\n    }\n\n    public prepare(canvas: HTMLElement): void {\n        super.prepare(canvas)\n    }\n\n    public destroy(): void {\n        super.destroy()\n    }\n\n    public draw(): void {\n        this._transform = translate(this._transform, -this.width * this.origin.x, -this.height * this.origin.y)\n        this._transform = rotate(this._transform, this.direction)\n\n        const { a, b, c, d, tx, ty } = this._transform\n        this.element.style.transformOrigin = `${this.origin.x * 100}% ${this.origin.y * 100}%`\n        this.element.style.transform = `matrix(${a}, ${b}, ${c}, ${d}, ${this.x + tx}, ${this.y + ty})`\n    }\n\n    public get position() {\n        return { x: this.x, y: this.y }\n    }\n\n    public set position(value: Vector) {\n        this.x = value.x\n        this.y = value.y\n    }\n\n    public get x() {\n        return this._position.x\n    }\n\n    public set x(value: number) {\n        this._position.x = value\n    }\n\n    public get y() {\n        return this._position.y\n    }\n\n    public set y(value: number) {\n        this._position.y = value\n    }\n\n    public get a() {\n        return { x: this.ax, y: this.bx }\n    }\n\n    public get b() {\n        return { x: this.bx, y: this.by }\n    }\n\n    public get ax() {\n        return this.x - this.width * this.origin.x\n    }\n\n    public get ay() {\n        return this.y - this.height * this.origin.y\n    }\n\n    public get bx() {\n        return this.x + this.width * (1 - this.origin.x)\n    }\n\n    public get by() {\n        return this.y - this.width * (1 - this.origin.y)\n    }\n}\n\n\nexport default Point","import { throttle } from \"../common\"\nimport Shape from \"../Shape/Shape\"\n\n\n\nclass RotatableBehaviour {\n    private readonly _target: Shape\n    private readonly _state = {\n        initialized: null,\n        active: false,\n        cursor: \"\"\n    }\n\n    public static enabled = true\n\n    constructor(target: Shape) {\n        this._target = target\n        this._state.initialized = requestAnimationFrame(() => {\n            this._target.element.addEventListener(\"mousedown\", this._onmousedown)\n            document.addEventListener(\"mouseup\", this._onmouseup)\n            document.addEventListener(\"wheel\", this._onscroll)\n        })\n    }\n\n    public destroy(): void {\n        if (this._state.initialized !== null) {\n            cancelAnimationFrame(this._state.initialized)\n        } else {\n            this._target.element.removeEventListener(\"mousedown\", this._onmousedown)\n            document.removeEventListener(\"mouseup\", this._onmouseup)\n            document.removeEventListener(\"scroll\", this._onscroll)\n        }\n    }\n\n    private readonly _onmousedown = (event: MouseEvent): void => {\n        event.preventDefault()\n        if (RotatableBehaviour.enabled) {\n            this._state.active = true\n            this._target.element.classList.add(\"active\")\n        }\n    }\n\n    private readonly _onmouseup = (event: MouseEvent): void => {\n        event.preventDefault()\n        if (RotatableBehaviour.enabled) {\n            this._state.active = false\n            this._target.element.classList.remove(\"active\")\n        }\n    }\n\n    private readonly _onscroll = (event: WheelEvent) => {\n        if (RotatableBehaviour.enabled) {\n            const speed = 0.025\n            this._target.direction += speed * Math.PI * Math.sign(event.deltaY)\n            const rotationEl = document.querySelector(\".rotation\")\n            rotationEl.textContent = `${(this._target.direction * (180 / Math.PI)).toFixed(2)}°`\n        }\n    }\n}\n\n\nexport default RotatableBehaviour","import Matrix, { rotate, translate } from \"../Math/Matrix\"\nimport Vector, { add, direction, distance, normalize, scale, subtract } from \"../Math/Vector\"\nimport Point from \"./Point\"\nimport Shape from \"./Shape\"\n\n\n\nclass Line extends Shape {\n    private readonly _pointA: Point\n    private readonly _pointB: Point\n\n    constructor(pointA: Point, pointB: Point) {\n        super()\n        this.origin = { x: 0, y: 0.5 }\n\n        this._pointA = pointA\n        this._pointB = pointB\n\n        const inner = document.createElement(\"div\")\n        inner.className = \"shape line\"\n        this.element.style.height = \"0\"\n        this.element.append(inner)\n    }\n\n    public prepare(canvas: HTMLElement): void {\n        super.prepare(canvas)\n        this._pointA.prepare(canvas)\n        this._pointB.prepare(canvas)\n    }\n\n    public destroy(): void {\n        super.destroy()\n        this._pointA.destroy()\n        this._pointB.destroy()\n    }\n\n    public draw(): void {\n        this._pointA.draw()\n        this._pointB.draw()\n\n        this.element.style.width = `${distance(this.a, this.b)}px`\n\n        this._transform = translate(this._transform, this.origin.x, -this.height * this.origin.y)\n        this._transform = rotate(this._transform, this.direction)\n        super.draw()\n    }\n\n    public get position() {\n        return { x: this.x, y: this.y }\n    }\n\n    public set position(value: Vector) {\n        const offset = subtract(this.b, this.a)\n        this.a = value\n        this.b = add(value, offset)\n    }\n\n    public get x() {\n        return this.ax\n    }\n\n    public set x(value: number) {\n        this.position = { x: value, y: this.y }\n    }\n\n    public get y() {\n        return this.ay\n    }\n\n    public set y(value: number) {\n        this.position = { x: this.x, y: value }\n    }\n\n    public get a() {\n        return this._pointA.position\n    }\n\n    public set a(value: Vector) {\n        this._pointA.position = value\n    }\n\n    public get b() {\n        return this._pointB.position\n    }\n\n    public set b(value: Vector) {\n        this._pointB.position = value\n    }\n\n    public get ax() {\n        return this.a.x\n    }\n\n    public set ax(value: number) {\n        this.a.x = value\n    }\n\n    public get bx() {\n        return this.b.x\n    }\n\n    public set bx(value: number) {\n        this.b.x = value\n    }\n\n    public get ay() {\n        return this.a.y\n    }\n\n    public set ay(value: number) {\n        this.a.y = value\n    }\n\n    public get by() {\n        return this.b.y\n    }\n\n    public set by(value: number) {\n        this.b.y = value\n    }\n\n    public get direction() {\n        return direction(normalize(subtract(this.a, this.b)))\n    }\n\n    public set direction(value: number) {\n        const delta = value - this._direction\n        this.b = Vector.rotate(this.b, this.a, delta)\n        this._direction = direction(normalize(subtract(this.a, this.b)))\n    }\n}\n\n\nexport default Line","import RotatableBehaviour from \"../Behaviour/RotatableBehaviour\"\nimport Matrix, { translate } from \"../Math/Matrix\"\nimport Vector, { distance, divide, rotate, subtract } from \"../Math/Vector\"\nimport Line from \"./Line\"\nimport Point from \"./Point\"\nimport Shape, { ShapeEvent } from \"./Shape\"\n\n\n\nclass Polygon extends Shape {\n    private readonly _rotatable = new RotatableBehaviour(this)\n    private readonly _shapes: Shape[]\n    private readonly _points: Point[]\n\n    constructor(...points: Point[]) {\n        super()\n        this._points = points\n\n        this._shapes = []\n        for (let i = 0, j = i + 1; i < points.length; i++, j++) {\n            if (j < points.length) {\n                this._shapes.push(points[i], new Line(points[i], points[j]))\n            } else {\n                this._shapes.push(points[i], new Line(points[i], points[0]))\n            }\n        }\n\n        this.element.className = \"shape polygon\"\n        this.element.style.cursor = \"move\"\n    }\n\n    public prepare(canvas: HTMLElement): void {\n        super.prepare(canvas)\n        for (const shape of this._shapes) {\n            shape.prepare(canvas)\n        }\n    }\n\n    public destroy(): void {\n        super.destroy()\n        for (const shape of this._shapes) {\n            shape.destroy()\n        }\n    }\n\n    public draw(): void {\n        for (const shape of this._shapes) {\n            shape.draw()\n        }\n\n        this.element.style.width = `${this.width}px`\n        this.element.style.height = `${this.height}px`\n\n        this._transform = translate(this._transform, -this.width * this.origin.x, -this.height * this.origin.y)\n        super.draw()\n    }\n\n    public get points() {\n        return this._points\n    }\n\n    public get width() {\n        return this.bx - this.ax\n    }\n\n    public get height() {\n        return this.by - this.ay\n    }\n\n    public get innerDimension() {\n        return { x: this.innerWidth, y: this.innerHeight }\n    }\n\n    public get innerWidth() {\n        return distance(this.a, { x: this.bx, y: this.ay })\n    }\n\n    public get innerHeight() {\n        return distance(this.a, { x: this.ax, y: this.by })\n    }\n\n    public get position() {\n        const x = this.ax + this.width * this.origin.x,\n            y = this.ay + this.height * this.origin.y\n        return { x, y }\n    }\n\n    public set position(value: Vector) {\n        const position = this.position\n        for (const point of this._points) {\n            const delta = subtract(point.position, position)\n            if (point.x === position.x) {\n                point.x = value.x\n            } else if (point.x < position.x) {\n                point.x = value.x + delta.x\n            } else if (point.x > position.x) {\n                point.x = value.x + delta.x\n            }\n\n            if (point.y === position.y) {\n                point.y = value.y\n            } else if (point.y < position.y) {\n                point.y = value.y + delta.y\n            } else if (point.y > position.y) {\n                point.y = value.y + delta.y\n            }\n        }\n    }\n\n    public get x() {\n        return this.position.x\n    }\n\n    public set x(value: number) {\n        this.position = { x: value, y: this.y }\n    }\n\n    public get y() {\n        return this.position.y\n    }\n\n    public set y(value: number) {\n        this.position = { x: this.x, y: value }\n    }\n\n    public get a() {\n        return { x: this.ax, y: this.ay }\n    }\n\n    public get b() {\n        return { x: this.bx, y: this.by }\n    }\n\n    public get ax() {\n        return Math.min(...this._points.map(point => point.x))\n    }\n\n    public get ay() {\n        return Math.min(...this._points.map(point => point.y))\n    }\n\n    public get bx() {\n        return Math.max(...this._points.map(point => point.x))\n    }\n\n    public get by() {\n        return Math.max(...this._points.map(shape => shape.y))\n    }\n\n    public get scale() {\n        return this._scale\n    }\n\n    public set scale(value: Vector) {\n        const delta = divide(value, this._scale)\n\n        const previousOrigin = this.origin\n        const previousDirection = this._direction\n\n        this.origin = { x: 0.5, y: 0.5 }\n        this.direction = 0\n        this.origin = previousOrigin\n        const w = this.width * 0.5\n        const h = this.height * 0.5\n\n        const { x, y } = this.position\n        for (const point of this._points) {\n            point.x = ((delta.x) * (point.x - x)) + x\n            point.y = ((delta.y) * (point.y - y)) + y\n        }\n\n        this.origin = { x: Math.abs(previousOrigin.x - (w / this.width)), y: Math.abs((h / this.height) - previousOrigin.y) }\n        this.direction = previousDirection\n        this.origin = previousOrigin\n\n        this._scale = value\n    }\n\n    public get direction() {\n        return super.direction\n    }\n\n    public set direction(value: number) {\n        if (Math.abs(value) >= 2 * Math.PI) {\n            value = 0\n        }\n\n        const delta = value - super.direction\n        const position = this.position\n        for (const point of this._points) {\n            point.position = rotate(position, point, delta)\n            point.direction = value\n        }\n\n        super.direction = value\n    }\n}\n\n\nexport default Polygon","import EventListener from \"../Core/Event/EventListener\"\nimport Vector, { add, ap, distance, divide, scale, subtract } from \"../Core/Math/Vector\"\nimport Point from \"../Core/Shape/Point\"\nimport Polygon from \"../Core/Shape/Polygon\"\nimport { ShapeEvent } from \"../Core/Shape/Shape\"\n\n\n\ntype State = {\n    initialPolygonOrigin: Vector,\n    initialPolygonOriginOffset: Vector,\n    initialPolygonScale: Vector\n    initialActivePoint: Vector,\n    initialFarthestPoint: Vector,\n}\n\n\nclass FreePolygonStrategy {\n    private readonly _canvas: HTMLElement\n    private readonly _polygon: Polygon\n    private readonly _points: Record<keyof { a; b; c; d }, Point>\n\n    constructor(canvas: HTMLElement, polygon: Polygon, points: Record<keyof { a, b, c, d }, Point>) {\n        this._canvas = canvas\n        this._polygon = polygon\n        this._points = points\n\n        this._handleMove\n            .subscribe(this._polygon.element)\n        for (const point of this._polygon.points) {\n            this._handleResize\n                .subscribe(point.element)\n        }\n    }\n\n    public destroy(): void {\n        this._handleMove\n            .destroy()\n        this._handleResize\n            .destroy()\n    }\n\n    private readonly _handleMove = new EventListener(ShapeEvent.MOVE, (event: ShapeEvent.MoveEvent) => {\n        const { shape, destination, offset } = event.detail\n        shape.position = add(destination, offset)\n    })\n\n    private readonly _handleResize = new EventListener(ShapeEvent.MOVE, (event: ShapeEvent.MoveEvent) => {\n        const { shape, destination } = event.detail\n        console.log(shape)\n        shape.position = destination\n    })\n}\n\n\n\nexport default FreePolygonStrategy","import EventListener from \"../Core/Event/EventListener\"\nimport Vector, { add, ap, distance, divide, scale, subtract } from \"../Core/Math/Vector\"\nimport Point from \"../Core/Shape/Point\"\nimport Polygon from \"../Core/Shape/Polygon\"\nimport { ShapeEvent } from \"../Core/Shape/Shape\"\n\n\n\ntype State = {\n    initialPolygonOrigin: Vector,\n    initialPolygonOriginOffset: Vector,\n    initialPolygonScale: Vector\n    initialActivePoint: Vector,\n    initialFarthestPoint: Vector,\n}\n\n\nclass LockedScalingStrategy {\n    private readonly _canvas: HTMLElement\n    private readonly _polygon: Polygon\n    private readonly _points: Record<keyof { a; b; c; d }, Point>\n    private _state?: State\n\n    constructor(canvas: HTMLElement, polygon: Polygon, points: Record<keyof { a, b, c, d }, Point>) {\n        this._canvas = canvas\n        this._polygon = polygon\n        this._points = points\n\n        this._handleMove\n            .subscribe(this._polygon.element)\n        for (const point of this._polygon.points) {\n            this._handleResize\n                .subscribe(point.element)\n            this._handleResizeStart\n                .subscribe(point.element)\n            this._handleResizeEnd\n                .subscribe(point.element)\n        }\n    }\n\n    public destroy(): void {\n        this._handleMove\n            .destroy()\n        this._handleResize\n            .destroy()\n        this._handleResizeStart\n            .destroy()\n        this._handleResizeEnd\n            .destroy()\n    }\n\n    private readonly _handleMove = new EventListener(ShapeEvent.MOVE, (event: ShapeEvent.MoveEvent) => {\n        const { shape, destination, offset } = event.detail\n        shape.position = add(destination, offset)\n    })\n\n    private readonly _handleResize = new EventListener(ShapeEvent.MOVE, (event: ShapeEvent.MoveEvent) => {\n        if (this._state === undefined) {\n            return\n        }\n\n        const {\n            initialPolygonOrigin, initialPolygonOriginOffset, initialPolygonScale,\n            initialActivePoint, initialFarthestPoint\n        } = this._state\n        const { destination } = event.detail\n        const longer = distance(destination, initialFarthestPoint),\n            shorter = distance(initialActivePoint, initialFarthestPoint)\n        const delta = scale(initialPolygonScale, longer / shorter - 1)\n        this._polygon.origin = initialPolygonOriginOffset\n        this._polygon.scale = add(delta, initialPolygonScale)\n        this._polygon.origin = initialPolygonOrigin\n    })\n\n    private readonly _handleResizeStart = new EventListener(ShapeEvent.MOVE_START, (event: ShapeEvent.MoveEvent) => {\n        const { shape } = event.detail\n        this._state = {\n            initialPolygonOrigin: this._polygon.origin,\n            initialPolygonOriginOffset: ap(divide(subtract(shape, this._polygon.a), this._polygon.dimension), x => -~-Math.round(x)),\n            initialPolygonScale: this._polygon.scale,\n            initialActivePoint: shape.position,\n            initialFarthestPoint: this._polygon.points\n                .reduce(\n                    (farthest, next) =>\n                        distance(shape, next) > distance(shape, farthest) ?\n                            next : farthest\n                ).position\n        }\n    })\n\n    private readonly _handleResizeEnd = new EventListener(ShapeEvent.MOVE_END, (event: ShapeEvent.MoveEvent) => {\n        this._polygon.origin = this._state.initialPolygonOrigin\n        delete this._state\n    })\n}\n\n\n\nexport default LockedScalingStrategy","import EventListener from \"../Core/Event/EventListener\"\nimport Vector, { add, ap, distance, divide, dot, multiply, normalize, rotate, scale, subtract, length } from \"../Core/Math/Vector\"\nimport Point from \"../Core/Shape/Point\"\nimport Polygon from \"../Core/Shape/Polygon\"\nimport { ShapeEvent } from \"../Core/Shape/Shape\"\n\n\n\ntype State = {\n    initialHorizontalPoint: Vector,\n    initialVerticalPoint: Vector,\n    initialPolygonOrigin: Vector,\n    initialPolygonOriginOffset: Vector,\n    initialPolygonScale: Vector\n    initialActivePoint: Vector,\n    initialFarthestPoint: Vector,\n}\n\n\nclass UnlockedScalingStrategy {\n    private readonly _canvas: HTMLElement\n    private readonly _polygon: Polygon\n    private readonly _points: Record<keyof { a, ab, b, bc, c, cd, d, da }, Point>\n    private _state?: State\n    private _i: HTMLElement\n    private _j: HTMLElement\n\n    constructor(canvas: HTMLElement, polygon: Polygon, points: Record<keyof { a, ab, b, bc, c, cd, d, da }, Point>) {\n        this._canvas = canvas\n        this._polygon = polygon\n        this._points = points\n\n        this._handleMove\n            .subscribe(this._polygon.element)\n        for (const point of this._polygon.points) {\n            this._handleResize\n                .subscribe(point.element)\n            this._handleResizeStart\n                .subscribe(point.element)\n            this._handleResizeEnd\n                .subscribe(point.element)\n        }\n    }\n\n    public destroy(): void {\n        this._handleMove\n            .destroy()\n        this._handleResize\n            .destroy()\n        this._handleResizeStart\n            .destroy()\n        this._handleResizeEnd\n            .destroy()\n    }\n\n    private readonly _handleMove = new EventListener(ShapeEvent.MOVE, (event: ShapeEvent.MoveEvent) => {\n        const { shape, destination, offset } = event.detail\n        shape.position = add(destination, offset)\n    })\n\n    private readonly _handleResize = new EventListener(ShapeEvent.MOVE, (event: ShapeEvent.MoveEvent) => {\n        if (this._state === undefined) {\n            return\n        }\n\n        const {\n            initialPolygonOrigin, initialPolygonOriginOffset, initialPolygonScale,\n            initialActivePoint: K, initialFarthestPoint, initialHorizontalPoint: H, initialVerticalPoint: V\n        } = this._state\n        const { shape, destination: M } = event.detail\n        const { abs, atan2, cos, acos, PI: π } = Math\n\n\n        const ma = subtract(M, K),\n            ab = subtract(H, K),\n            ad = subtract(V, K)\n        const α = acos(dot(normalize(ma), normalize(ab)))\n        const β = acos(dot(normalize(ma), normalize(ad)))\n\n        this._polygon.origin = initialPolygonOriginOffset\n\n        const delta = multiply(initialPolygonScale, {\n            x: ((-cos(α) * length(ma) + length(ab)) / length(ab)) - 1,\n            y: ((-cos(β) * length(ma) + length(ad)) / length(ad)) - 1\n        })\n\n        if (delta.x === -Infinity) {\n            delta.x = 0\n        }\n\n        if (delta.y === -Infinity) {\n            delta.y = 0\n        }\n\n        this._polygon.scale = add(initialPolygonScale, delta)\n        this._polygon.origin = initialPolygonOrigin\n    })\n\n    private readonly _handleResizeStart = new EventListener(ShapeEvent.MOVE_START, (event: ShapeEvent.MoveEvent) => {\n        const { shape } = event.detail\n\n        const previousPolygonDirection = this._polygon.direction\n        this._polygon.direction = 0\n        const origin = ap(divide(subtract(shape, this._polygon.a), this._polygon.dimension), x => -~-Math.round(x))\n        this._polygon.direction = previousPolygonDirection\n\n        const { a: A, ab: AB, b: B, bc: BC, c: C, cd: CD, d: D, da: DA } = this._points\n        let H, V\n         switch (shape) {\n            case A:\n                H = B\n                V = D\n                break\n            case AB:\n                H = AB\n                V = CD\n                break\n            case B:\n                H = A\n                V = C\n                break\n            case BC:\n                H = DA\n                V = BC\n                break\n            case C:\n                H = D\n                V = B\n                break\n            case CD:\n                H = CD\n                V = AB\n                break\n            case D:\n                H = C\n                V = A\n                break\n            case DA:\n                H = BC\n                V = DA\n                break\n            default:\n                throw new Error()\n        }\n\n        this._state = {\n            initialHorizontalPoint: H.position,\n            initialVerticalPoint: V.position,\n            initialPolygonOrigin: this._polygon.origin,\n            initialPolygonOriginOffset: origin,\n            initialPolygonScale: this._polygon.scale,\n            initialActivePoint: shape.position,\n            initialFarthestPoint: this._polygon.points\n                .reduce(\n                    (farthest, next) =>\n                        distance(shape, next) > distance(shape, farthest) ?\n                            next : farthest\n                ).position\n        }\n    })\n\n    private readonly _handleResizeEnd = new EventListener(ShapeEvent.MOVE_END, (event: ShapeEvent.MoveEvent) => {\n        // this._polygon.origin = this._state.initialPolygonOrigin\n        delete this._state\n    })\n}\n\n\n\nexport default UnlockedScalingStrategy","import RotatableBehaviour from \"./Core/Behaviour/RotatableBehaviour\"\nimport Vector from \"./Core/Math/Vector\"\nimport Point from \"./Core/Shape/Point\"\nimport Polygon from \"./Core/Shape/Polygon\"\nimport FreePolygonStrategy from \"./Strategy/FreePolygonStrategy\"\nimport LockedScalingStrategy from \"./Strategy/LockedScalingStrategy\"\nimport UnlockedScalingStrategy from \"./Strategy/UnlockedScalingStrategy\"\nimport ImageSubject from \"./Subject/ImageSubject\"\n\n\n\nclass OverlayEditor {\n    private readonly _subject: ImageSubject\n    private readonly _polygon: Polygon\n    private readonly _points: Record<keyof { a, ab, b, bc, c, cd, d, da }, Point>\n\n    constructor(canvas: HTMLElement, subject: ImageSubject) {\n        this._subject = subject\n        const a = new Point(0, 0),\n            ab = new Point(160, 0),\n            b = new Point(320, 0),\n            bc = new Point(320, 120),\n            c = new Point(320, 240),\n            cd = new Point(160, 240),\n            d = new Point(0, 240),\n            da = new Point(0, 120)\n        this._polygon = new Polygon(a, ab, b, bc, c, cd, d, da)\n        this._points = { a, ab, b, bc, c, cd, d, da }\n\n        this._subject.strategy = new LockedScalingStrategy(canvas, this._polygon, this._points)\n        const modeEl: HTMLElement = document.querySelector(\".mode\")\n        let debunked = false\n        window.addEventListener(\"keypress\", (event) => {\n            const { key } = event\n            if (!debunked) {\n                switch (key) {\n                    case \"1\":\n                        subject.strategy.destroy()\n                        subject.strategy = new LockedScalingStrategy(canvas, this._polygon, this._points)\n                        modeEl.textContent = \"Locked Scaling\"\n                        break\n                    case \"2\":\n                        subject.strategy.destroy()\n                        subject.strategy = new UnlockedScalingStrategy(canvas, this._polygon, this._points)\n                        modeEl.textContent = \"Unlocked Scaling\"\n                        break\n                    case \"3\":\n                        // RotatableBehaviour.enabled = false\n                        debunked = true\n                        subject.strategy.destroy()\n                        subject.strategy = new FreePolygonStrategy(canvas, this._polygon, this._points)\n                        modeEl.textContent = \"Polygon (LOCKED)\"\n                        modeEl.style.color = \"lightcoral\"\n                        modeEl.style.fontWeight = \"bold\"\n                        break\n                }\n            }\n        })\n\n        const projection = document.createElement(\"div\")\n        projection.className = \"preview projection\"\n        projection.style.position = \"relative\"\n        projection.style.width = \"100%\"\n        projection.style.height = \"100%\"\n        projection.style.overflow = \"hidden\"\n\n        // this._polygon.origin = {  x: 1, y: 1 }\n        let n = 1\n        const tick = () => {\n            this._polygon.draw()\n            this._subject.draw(projection, this._polygon, this._points)\n            // this._polygon.scale = { x: n, y: 1 }\n            if (n < 2) {\n                n += 0.0025\n            }\n            requestAnimationFrame(tick)\n        }\n\n        this._polygon.prepare(canvas)\n        this._subject.prepare(projection, this._polygon, this._points)\n        requestAnimationFrame(tick)\n\n        canvas.append(projection)\n    }\n\n    public destroy(): void {\n\n    }\n}\n\n\n\nexport default OverlayEditor","import Matrix, { rotate, translate } from \"../Core/Math/Matrix\"\nimport { distance } from \"../Core/Math/Vector\"\nimport Point from \"../Core/Shape/Point\"\nimport Polygon from \"../Core/Shape/Polygon\"\nimport FreePolygonStrategy from \"../Strategy/FreePolygonStrategy\"\nimport LockedScalingStrategy from \"../Strategy/LockedScalingStrategy\"\nimport UnlockedScalingStrategy from \"../Strategy/UnlockedScalingStrategy\"\n\n\n\nclass ImageSubject {\n    private readonly _element: HTMLElement\n    private _transform: Matrix = Matrix.identity()\n    private _strategy?: LockedScalingStrategy | UnlockedScalingStrategy | FreePolygonStrategy\n\n    constructor() {\n        this._element = document.createElement(\"div\")\n        this._element.className = \"subject image\"\n        this._element.style.position = \"absolute\"\n        this._element.style.pointerEvents = \"none\"\n        this._element.style.backgroundImage = \"url(\\\"https://media.giphy.com/media/koUtwnvA3TY7C/giphy.gif\\\")\"\n        this._element.style.backgroundSize = `calc(100% - 6px) calc(100% - 6px)`\n        this._element.style.backgroundRepeat = `no-repeat`\n        this._element.style.backgroundPosition = `center`\n    }\n\n    public prepare(canvas: HTMLElement, polygon: Polygon, points: Record<keyof { a, b, c, d }, Point>) {\n        canvas.append(this._element)\n        // this._strategy.prepare(canvas, polygon, points)\n    }\n\n    public draw(canvas: HTMLElement, polygon: Polygon, points: Record<keyof { a, b, c, d }, Point>): void {\n        const width = distance(points.a, points.b),\n            height = distance(points.a, points.d)\n\n        this._element.style.width = `${width}px`\n        this._element.style.height = `${height}px`\n\n        this._transform = translate(this._transform, -width * polygon.origin.x, -height * polygon.origin.y)\n        this._transform = rotate(this._transform, polygon.direction)\n\n        const { a, b, c, d, tx, ty } = this._transform\n        this._element.style.transformOrigin = `${polygon.origin.x * 100}% ${polygon.origin.y * 100}%`\n        this._element.style.transform = `matrix(${a}, ${b}, ${c}, ${d}, ${polygon.x + tx}, ${polygon.y + ty})`\n\n        canvas.style.clipPath = `polygon(${\n            polygon.points\n                .map(point => `${point.x}px ${point.y}px`)\n        })`\n    }\n\n    public get strategy() {\n        return this._strategy\n    }\n\n    public set strategy(value: LockedScalingStrategy | UnlockedScalingStrategy | FreePolygonStrategy) {\n        this._strategy = value\n    }\n}\n\n\n\nexport default ImageSubject","import \"./dev\"\nimport OverlayEditor from \"./OverlayEditor\"\nimport LockedScalingStrategy from \"./Strategy/LockedScalingStrategy\"\nimport ImageSubject from \"./Subject/ImageSubject\"\n\n\n\nexport function main() {\n    const canvas = document.querySelector<HTMLElement>(\".preview\")\n\n    const subject = new ImageSubject()\n    const editor = new OverlayEditor(canvas, subject)\n}\n\n\n\n\n\n\n\n\n// const canvas = document.querySelector<HTMLElement>(\".preview\")\n// const pointA = new Point(0, 0)\n// const pointAB = new Point(160, 0)\n// const pointB = new Point(320, 0)\n// const pointBC = new Point(320, 120)\n// const pointC = new Point(320, 240)\n// const pointCD = new Point(160, 240)\n// const pointD = new Point(0, 240)\n// const pointDA = new Point(0, 120)\n// const polygon = new Polygon(pointA, pointAB, pointB, pointBC, pointC, pointCD, pointD, pointDA)\n// const line = new Line(pointA, pointC)\n//\n// // canvas.append(pointA.element)\n// // canvas.append(pointB.element)\n// // canvas.append(pointC.element)\n// // canvas.append(pointD.element)\n// // canvas.append(polygon.element)\n// // canvas.append(line.element)\n// // line.prepare(canvas)\n// polygon.prepare(canvas)\n// polygon.position = { x: 250, y: 250 }\n// // line.direction = 1.5 * Math.PI\n//\n// function tick() {\n//     // line.position = { x: 150, y: 150 }\n//     // line.x += 1\n//     // line.y += 1\n//     // line.direction += 0.0015 * Math.PI\n//     // pointA.direction += 0.0025 * Math.PI\n//     // pointC.direction -= 0.0025 * Math.PI\n//     // pointA.x = pointA.x + 2\n//     // pointA.y = pointA.y + 1\n//     // pointB.x = pointB.x + 1\n//     // pointB.y = pointB.y + 2\n//     // point.y = point.y + 3\n//\n//     // line.draw()\n//     polygon.draw()\n//     // polygon.x += .25\n//     // polygon.y += .25\n//     // polygon.direction += Math.PI * 0.01\n//     // console.log(polygon.direction)\n//     requestAnimationFrame(tick)\n// }\n//\n// tick()"]}